#!/usr/bin/env python
"""
  Copyright (C) 2007,2008 Richard Quirk

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
import os, os.path, glob, sys

executableName = os.path.basename( os.getcwd())
libndsppDir = '../libndspp'

headers=['#/%s/include'%libndsppDir]
commonFlags = ' -g -Wall '
libraryFiles = {
    'pc': '',
    }

# create the default environment with coloured output
defaultEnv = Environment(CCFLAGS=commonFlags, CPPPATH=headers,
    tools=['default', 'color', 'grit', 'unit_test'], toolpath = ['%s/ndspp-scons'%libndsppDir],
    TARFLAGS='-c -z', TARSUFFIX='tar.gz')
buildTargets = ['pc', 'arm9', 'arm7']

sys.path.append(os.path.join(libndsppDir, 'ndspp-scons'))
from find import find
# function definitions

# create the dist files
def dist():
  project = 'bunjalloo'
  version = ARGUMENTS.get('version','0.5.2')
  distfile = '%s-%s.zip'%(project, version)
  srcfile = '%s-src-%s'%(project, version)
  defaultEnv['DIST_NAME'] = distfile
  defaultEnv['DIST_SRC_NAME'] = srcfile


def die(msg):
  import color
  print '*** ',
  color.pprint(msg, color.red)
  Exit(1)

def configure(target, env):
  if env.GetOption('clean'):
    return env
  conf = env.Configure()
  where = ' in $DEVKITPRO'
  if target == 'arm7':
    conf.CheckLibWithHeader('nds7', 'nds.h', 'c') or die('Install libnds'+where)
    where += '/libnds'
    conf.CheckLibWithHeader('ndspp-%s'%target, 'ndspp.h', 'c++', None, True) \
            or die('libndspp must be compiled in "../libndspp"')

    conf.CheckLibWithHeader('dswifi7', ['nds/jtypes.h', 'dswifi7.h'], 'c', None, True) or die('Install the dswifi library'+where)
  elif target == 'arm9':
    conf.CheckLibWithHeader('nds9', 'nds.h', 'c', None, True) or die('Install libnds'+where)
    where += '/libnds'
    conf.CheckLibWithHeader('ndspp-%s'%target, 'ndspp.h', 'c++', None, True) \
            or die('libndspp must be compiled in "../libndspp"')
    conf.CheckLibWithHeader('fat', 'fat.h', 'c', None, True) or die('Install the fat library'+where)
    conf.CheckLibWithHeader('dswifi9', ['nds/jtypes.h', 'dswifi9.h'], 'c', None, True) or die('Install the dswifi library'+where)
    conf.CheckLibWithHeader('nds9', 'nds.h', 'c', None, True) or die('Install libnds'+where)
  else:
    where = '-dev for your system'
    conf.CheckLibWithHeader('ndspp-%s'%target, 'ndspp.h', 'c++', None, True) \
            or die('libndspp must be compiled in "../libndspp"')
    conf.CheckLibWithHeader('SDL', 'SDL/SDL.h', 'c', None, True) or die('Install SDL'+where)
    conf.CheckLibWithHeader('GL', 'GL/gl.h', 'c', None, True) or die('Install gl'+where)
    conf.CheckLibWithHeader('cppunit', 'cppunit/CompilerOutputter.h', 'c++', None, False) or die('Install cppunit'+where)

  # common libs
  if target != 'arm7':
    for lib,header in ( ('png','png'), ('z','zlib'), ('gif','gif_lib'), ('jpeg','jpeglib'),
        ('matrixsslstatic','matrixSsl'), ('unzip', 'unzip') ):
      conf.CheckLibWithHeader(lib, ['stdio.h',header+'.h'], 'c', None, True) \
              or die('Install '+header+where)

  return conf.Finish()

## create the environment for the chosen target
# @param buildTarget the target build (pc, arm9, arm7)
# @return the environment copied from defaultEnv
def createEnv(buildTarget):
  global defaultEnv
  dist()
  env = None
  if buildTarget.startswith('arm'):
    env = defaultEnv.Copy( tools = [ ('arm', { 'type':buildTarget })],
        OBJCOPYFLAGS = ' -I binary -O elf32-littlearm -B arm \
            --rename-section .data=.rodata,readonly,contents ')
    env.Append(CPPDEFINES=['sprintf_platform=siprintf'])
    env.Append(CCFLAGS=' -O2 ')
  else:
    env = defaultEnv.Copy()
    #env.Append(CCFLAGS="-fprofile-arcs -ftest-coverage")
    env.Append(OBJCOPY = 'objcopy')
    env.Append(OBJCOPYFLAGS = ' -I binary -O elf32-i386 -B i386 ')
    env.Append(CPPDEFINES=['sprintf_platform=sprintf'])
    env.Append(CCFLAGS=' -O0 ')
    #env.Prepend( LIBS=['gcov'])
    for i in ['CC', 'CXX', 'OBJCOPY']:
      if os.environ.has_key(i) and os.environ[i]:
        env[i] = os.environ[i]

  env.Append( LIBPATH=['#/%s/lib'%libndsppDir])
  env = configure(buildTarget, env)
  addObjCopyImageBuilders(env)
  env.Alias('dist', env['DIST_NAME'])
  return env

## Add the project directories to the given Environment.
# @param env the environment for this build
# @param buildTarget the build target name
def addProjectDirs(env, buildTarget):
  env.Append( CPPPATH=['#/bwt/include'])
  env.Prepend(LIBPATH=['#/build/%s/bwt/lib/'%buildTarget])
  env.Prepend(LIBS=['bwt'])
  env.Append( CPPDEFINES=[('DATADIR','\\"data/bunjalloo\\"')])
  pass

## Add the project specific builders.
# @param env the Environment to alter.
def addObjCopyImageBuilders(env):

  # create o file from bin
  # cd to the directory otherwise puts build path in name.
  objBld = Builder(action='cd ${SOURCE.dir} && $OBJCOPY $OBJCOPYFLAGS ${SOURCE.file} ${TARGET.file}',
      suffix='.o',
      src_suffix='.bin')
  env.Append( BUILDERS = { 'Bin2o': objBld } )

  ## Create header file from png. Opens the .h file and writes several lines
  # into it.
  # @param target the target files
  # @param source the source file
  # @param env the Environment
  def build_h(target, source, env):
    fp = open(str(target[0]), 'w')
    f = os.path.basename(str(source[0])).split(os.path.extsep)[0]
    fd = f.replace('.','_')
    fp.write("""#ifndef %s_h_seen
#define %s_h_seen
#ifdef __cplusplus
extern "C" {
#endif"""%(fd, fd))
    for i in ('pal', 'img', 'map'):
      fp.write("""
              extern const u16 _binary_%s_%s_bin_end[];
              extern const u16 _binary_%s_%s_bin_start[];
              extern const u32 _binary_%s_%s_bin_size[];
              """%(fd, i, fd, i, fd, i))
    fp.write("""
#ifdef __cplusplus
};
#endif
#endif
""")
    return None

  bldHeader = Builder( action = build_h, suffix='.h', src_suffix='.png')
  env.Append(BUILDERS = {'Png2h': bldHeader})

  def build_cscope_file(target, source, env):
    try:
      f = open(str(target[0]), 'w')
      [f.write('%s\n'%str(s)) for s in source]
      return 0
    except Exception,e:
      return 1
  # create cscope.out from all source files.
  cscopeFileBld = Builder(action=build_cscope_file, suffix='.files')
  env.Append(BUILDERS = {'CscopeFile' :  cscopeFileBld})
  def cscope_emitter(target, source, env):
    return ( ['cscope.out', 'cscope.po.out', 'cscope.in.out'], source)
  cscopeBld = Builder(action='-cscope -b -k -q', suffix='.out', src_suffix='.files', emitter=cscope_emitter)
  env.Append(BUILDERS = {'Cscope' :  cscopeBld})

## Build everything for a particular target.
def build(buildTarget):
  """ build a particular build target """
  sourceDirectory = buildTarget

  if buildTarget != 'arm7':
    sourceDirectory = 'arm9'

  env = createEnv(buildTarget)

  if buildTarget != 'arm7':
    addProjectDirs(env, buildTarget)

  env['SOURCE_DIRS'] = sourceDirectory
  env['PLATFORM_NAME'] = buildTarget
  env['SOURCE_NAME'] = sourceDirectory

  env['BWT_SOURCE'] = [ os.path.basename(filename) for filename in glob.glob('bwt/source/*.cpp')]
  env['%s_SOURCE'%(sourceDirectory.upper())] = [
      os.path.basename(filename) for filename in glob.glob('%s/*.c*'%sourceDirectory)]

  # export the env to the SConscripts
  Export('env')

  # get the build artifacts from the sub directories
  # build them in build/<target> directory
  buildDir = '#build/%s'%buildTarget
  objs = []
  libbwt = None
  if buildTarget != 'arm7':
    libbwt = SConscript('bwt/SConscript', build_dir=os.path.join(buildDir, 'bwt'), duplicate=0)
  objs.append(SConscript('%s/SConscript'%sourceDirectory, build_dir=buildDir, duplicate=0))

  # create <builddir>/<target> file
  program = '%s/%s'%(buildDir, executableName)
  prog = env.Program(program, objs)
  libObjs = [ o for o in Flatten(objs) if (str(o).lower().rfind('main')==-1)]
  if (libObjs):
    # library used for unit tests
    lib = env.Library(program, libObjs)

  if (buildTarget != 'pc'):
    env.SideEffect(program+'.map', program)
    env.Elf2Arm('%s.arm'%program,  prog)

  if (libbwt != None):
    env.Depends(prog, libbwt)

  if (buildTarget == 'arm9'):
    env['ICON'] = 'common/data/icon.bmp'
    env['BANNER'] = '%s;Web Browser;By Richard Quirk'%executableName
    env['DLDIFILE'] = '%s/data/ez5s.dldi'%(os.environ['HOME'])
    nds = env.NdsTool(executableName, [ '#build/arm7/%s.arm'%executableName, '%s.arm'%program ])
    Default(nds)
    env.Zip(env['DIST_NAME'], nds)
    env.Zip(env['DIST_NAME'], '#/data')
    env.Zip(env['DIST_NAME'], '#/README')
    env.Zip(env['DIST_NAME'], '#/CREDITS')
    Default(env.DldiPatch('%s-patched'%executableName, executableName))

  # build the tests
  if (buildTarget == 'pc'):
    # build tests
    SConscript('tests/SConscript', build_dir=os.path.join(buildDir, 'tests'), duplicate=0)
    Default(env.Command('#/%s'%os.path.basename(str(prog[0])), prog, [Copy('$TARGET', '$SOURCE')]))
    Default('tests')
    filetypes = ['.cpp', '.c', '.h', '.inl', '.py']
    exclude = ['/build/']
    allFiles = [find('.', filetypes, exclude) , find('../libndspp', filetypes, exclude)]
    cs1 = env.CscopeFile('cscope', allFiles )
    cs2 = env.Cscope('cscope')
    env.Alias('cscope', [cs1,cs2])
  if (buildTarget != 'arm7'):
    opj=os.path.join
    SConscript('tests/gui-test/SConscript', build_dir=opj(buildDir, 'gui-test'), duplicate=0)
    SConscript('tests/lang-test/SConscript', build_dir=opj(buildDir, 'lang-test'), duplicate=0)
    SConscript('tests/patch-test/SConscript', build_dir=opj(buildDir, 'patch-test'), duplicate=0)
    SConscript('tests/images/SConscript', build_dir=opj(buildDir, 'images'), duplicate=0)
    SConscript('tests/sprite/SConscript', build_dir=opj(buildDir, 'sprite'), duplicate=0)
    Default('images')
    Default('sprite')
    Default('gui-test')
    Default('lang-test')
    Default('patch-test')

# build steps
[ build(buildTarget) for buildTarget in buildTargets ]

cmd = defaultEnv.Command('tags', '%s.nds'%executableName, 'ctags -R --c++-kinds=+p --fields=+iaS --extra=+q . ../libndspp')
Default(cmd)
