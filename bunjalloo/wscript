#!/usr/bin/env python
# encoding: utf-8

import Params, Environment
import os, os.path
import sys

Params.g_autoconfig = 1
top = os.getcwd()
APPNAME=os.path.basename(os.getcwd())

srcdir='.'
blddir='bld'
libndspp="../libndspp"
waf_tools=libndspp+"/waf_tools"
sys.path.append(waf_tools)

def set_options(opt):
  opt.tool_options('g++')
  opt.tool_options('compiler_cxx')

def arm_tool_check(conf):
  conf.check_tool('compiler_cxx')

  # cannot check compiler_cc for devkitArm as it needs LINKFLAGS, which waf
  # stips off in the check.
  conf.check_tool('arm7', waf_tools)
  conf.check_tool('arm9', waf_tools)
  conf.check_tool('grit', waf_tools)
  conf.check_tool('ndstool', waf_tools)
  conf.check_tool('objcopy', waf_tools)

def header_check(conf):
  # check headers
  e = conf.create_header_configurator()
  e.mandatory = 1
  e.nosystem = 1
  e.uselib = 'ARM9'
  e.path = conf.env['CPPPATH_ARM9']
  for header in ('zlib.h', 'matrixSsl.h'):
    e.name = header
    e.nosystem = 1
    e.run()

def configure(conf):
  # check native compiler
  arm_tool_check(conf)
  header_check(conf)
  GRITFLAGS='-pw 16 -gB 8 -m! -ftc -fh -q'
  DATADIR='data/bunjalloo'
  conf.env['CXXDEFINES'].extend(['sprintf_platform=siprintf'])
  conf.env['CXXDEFINES'].extend(['DATADIR=\\"%s\\"'%DATADIR])
  conf.env['GRITFLAGS'] = GRITFLAGS
  conf.env['LIBPATH'] += [libndspp+'/lib']
  conf.env['LIB_ARM7'] += ['ndspp-arm7']
  conf.env['LIB_ARM9'] += ['ndspp-arm9']

  sdl = Environment.Environment()
  conf.set_env_name('sdl', sdl)
  sdl.set_variant('sdl')
  conf.setenv('sdl')
  conf.check_tool('compiler_cxx')
  conf.check_tool('grit', waf_tools)
  sdl['GRITFLAGS'] = GRITFLAGS
  sdl['ARFLAGS'] += 'c'
  sdl['LIBPATH'] += [libndspp+'/lib']
  sdl['CXXDEFINES'] = ['sprintf_platform=sprintf']
  sdl['CXXDEFINES'].extend(['DATADIR=\\"%s\\"'%DATADIR])
  sdl['LIB'] += ['ndspp-pc']

def build(bld):
  # overcome chdir problems for jump-to-error
  if not Params.g_commands['clean']:
    print "waf: Entering directory `%s'"%(top+"/"+blddir)
  # process subfolders from here

  bld.add_subdirs('bwt')
  arm9obj = bld.create_obj('cpp', 'program')
  arm9obj.includes = libndspp+'/include '
  arm7obj = arm9obj.clone('default')
  arm7obj.includes += ' arm7 '
  arm9obj.includes += ' arm9 bwt/include bwt/img '
  arm9obj.uselib_local = 'bwt'
  arm9obj.find_sources_in_dirs('arm9')
  arm7obj.find_sources_in_dirs('arm7')

  sdl = arm9obj.clone('sdl')

  arm7obj.uselib = 'ARM7'
  arm9obj.uselib = 'ARM9'

  arm9obj.target = APPNAME+'-arm9'
  arm7obj.target = APPNAME+'-arm7'
  sdl.target = APPNAME

